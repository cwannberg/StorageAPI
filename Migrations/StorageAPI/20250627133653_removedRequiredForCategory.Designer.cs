// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StorageAPI.Data;

#nullable disable

namespace StorageAPI.Migrations.StorageAPI
{
    [DbContext(typeof(StorageAPIContext))]
    [Migration("20250627133653_removedRequiredForCategory")]
    partial class removedRequiredForCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StorageAPI.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Shelf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Mejeri",
                            Count = 40,
                            Description = "500ml",
                            Name = "Bregott",
                            Price = 60,
                            Shelf = "A1"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Frukt",
                            Count = 140,
                            Description = "Från Spanien",
                            Name = "Apelsin",
                            Price = 24,
                            Shelf = "B2"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Skafferi",
                            Count = 20,
                            Description = "Ekologiskt vetemjöl",
                            Name = "Vetemjöl",
                            Price = 10,
                            Shelf = "C4"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Grönt",
                            Count = 100,
                            Description = "Svenskt",
                            Name = "Broccoli",
                            Price = 30,
                            Shelf = "B1"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Mejeri",
                            Count = 20,
                            Description = "1 liter",
                            Name = "Filmjölk",
                            Price = 30,
                            Shelf = "A2"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
